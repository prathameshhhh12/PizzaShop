/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2023-02-15 18:50:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import com.db.utils.DbConnection;
import com.db.utils.DbConnection;
import java.sql.*;

public final class update_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.db.utils.DbConnection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Update record</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"main\">\r\n");
      out.write("<form method=\"post\" name=\"myform\" onsubmit=\"return validate();\">\r\n");
      out.write("<center>\r\n");
      out.write("<h1>Update Record</h1>\r\n");
      out.write("</center>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
try
{
	 Connection con = DbConnection.init();
     Statement st = con.createStatement();
if(request.getParameter("edit")!=null)
{
int id=Integer.parseInt(request.getParameter("edit"));
String item_name,price_rupee;

PreparedStatement pstmt=null; // create statement
pstmt=con.prepareStatement("select * from items where id=?"); // sql select q
pstmt.setInt(1,id);
ResultSet rs=pstmt.executeQuery(); // execute query store in resultset object
while(rs.next())
{
id=rs.getInt(1);
item_name=rs.getString(2);
price_rupee=rs.getString(3);

      out.write("\r\n");
      out.write("<tr>\r\n");
      out.write("<td>Pizza Name</td>\r\n");
      out.write("<td><input type=\"text\" name=\"item_name\" value=\"");
      out.print(item_name );
      out.write("\"></td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("<td>Price</td>\r\n");
      out.write("<td><input type=\"text\" name=\"price\" value=\"");
      out.print(price_rupee );
      out.write("\"></td>\r\n");
      out.write("</tr>\r\n");
      out.write("<tr>\r\n");
      out.write("<td><input type=\"submit\" name=\"btn-update\" value=\"Update\"></td>\r\n");
      out.write("</tr>\r\n");
      out.write("<input type=\"hidden\" name=\"txt_hide\" value=\"");
      out.print(id );
      out.write("\">\r\n");

}
}
}
catch(Exception e)
{
out.println(e);
}

      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

try
{
	 Connection con = DbConnection.init();
     Statement st = con.createStatement();
if(request.getParameter("btn-update")!=null)
{
	int hide;
	String item_name,price_rupee;
	hide=Integer.parseInt(request.getParameter("txt_hide")); //it is hidden id get f
	item_name=request.getParameter("item_name"); //txt_name
	price_rupee=request.getParameter("price"); //txt_owner
	PreparedStatement pstmt=null; //create statement
	pstmt=con.prepareStatement("update items set item_name=?, price_rupee=? where id=?"); //sq
	pstmt.setString(1,item_name);
	pstmt.setString(2,price_rupee);
	pstmt.setInt(3,hide);
	pstmt.executeUpdate(); //execute query
	con.close(); //connection close
	out.println("Update Successfully...! Click Back link."); //after update record s
	}
	}
	catch(Exception e)
	{
	out.println(e);
	}
	
      out.write("\r\n");
      out.write("	<center>\r\n");
      out.write("<h1><a href=\"addeditPizza.jsp\">Back</a></h1>\r\n");
      out.write("</center>\r\n");
      out.write("</form>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".main\r\n");
      out.write("{\r\n");
      out.write("width:700px;;\r\n");
      out.write("margin-left:250px;\r\n");
      out.write("padding: 10px;\r\n");
      out.write("border: 5px solid grey;\r\n");
      out.write("background-color:yellow;\r\n");
      out.write("}\r\n");
      out.write("table\r\n");
      out.write("{\r\n");
      out.write("font-family: arial, sans-serif;\r\n");
      out.write("border-collapse: collapse;\r\n");
      out.write("width: 600px;\r\n");
      out.write("}\r\n");
      out.write("td\r\n");
      out.write("{\r\n");
      out.write("border: 5px solid silver;\r\n");
      out.write("text-align: left;\r\n");
      out.write("padding: 8px;\r\n");
      out.write("}\r\n");
      out.write("</style>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
